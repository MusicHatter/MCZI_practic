import pyshark
import mysql.connector
import re

from array import *
from mysql.connector import MySQLConnection, Error

####################################

#Настройка подключения к СУБД

####################################

def create_connection(host_name, user_name, user_password):
    connection = None
    try:
        connection = mysql.connector.connect(
            host=host_name,
            user=user_name,
            passwd=user_password
        )
        print("Connection to MySQL DB successful")
    except Error as e:
        print(f"The error '{e}' occurred")
    return connection

connection = create_connection("localhost", "root", "123")

#Подключение файла
cap = pyshark.FileCapture('my_traffic.pcap')

cnx = connection
cursor = cnx.cursor()

####################################

#Названия таблиц и вспомогательные 
#функции

####################################

#Основные названия переменных

database_name = 'my_database'
main_table = 'main_table'

#Основной список запросов SQL

#Создать БД
Request_DB_Create = ("CREATE DATABASE %s;" %(database_name))
#Удалить БД
Request_DB_Delete = ("DROP DATABASE %s;" %(database_name))
#Подключиться к БД
Request_DB_Connect = ("USE %s;" %(database_name))

#Создание и подключение к новой БД
try:
    cursor.execute(Request_DB_Create)
except:
    cursor.execute(Request_DB_Delete)
    cursor.execute(Request_DB_Create)
cursor.execute(Request_DB_Connect)
print("Database «%s» created successfully" % (database_name))

#Функция создания таблицы
def create_table(table_name):
    Request_Table_Create = ("CREATE TABLE %s ( table_id VARCHAR(30) NOT NULL, table_len VARCHAR(30) NOT NULL, table_ip_src VARCHAR(30) NOT NULL, table_ip_dst VARCHAR(30) NOT NULL, table_layer VARCHAR(30) NOT NULL, table_post_scr VARCHAR(30) NOT NULL, table_post_dst VARCHAR(30) NOT NULL, table_eth_type VARCHAR(30) NOT NULL, table_time VARCHAR(30) NOT NULL);" % (table_name))
    
    Request_Table_Delete = ("DROP TABLE %s;" % (table_name))
    try:
        cursor.execute(Request_Table_Create)
    except:
        cursor.execute(Request_Table_Delete)
        cursor.execute(Request_Table_Create)
    
    print("Table «%s» created successfully" % (table_name))
    
####################################

#Создание основной таблицы

####################################

create_table(main_table)

#Перебор и загрузка в основную таблицу
i = 0
print("Reading PCAP-file...")
for idx, packet in enumerate(cap):
    id = cap[i].number
    len = cap[i].length
    try:
        ip_src = cap[i].ip.src
    except AttributeError:
        ip_src = ''
    try:
        ip_dst = cap[i].ip.dst
    except AttributeError:
        ip_dst = ''
    layer = cap[i].highest_layer
    #eth_src = cap[i].eth.addr мак-адрес
    #eth_dst = cap[i].eth.dst мак-адрес
    try:
        port_src = cap[i].tcp.srcport
    except AttributeError:
        try:
            port_src = cap[i].udp.srcport
        except AttributeError:
            port_src = ''
    try:
        port_dst = cap[i].tcp.dstport
    except AttributeError:
        try:
            port_dst = cap[i].udp.dstport  
        except AttributeError:
            port_dst = ''  
    time = cap[i].frame_info.time_relative
    
    try:
        eth_type = cap[i].eth.type
    except AttributeError:
        eth_type = ''

    add_employee = ("INSERT INTO %s VALUES (%r, %r, %r, %r, %r, %r, %r, %r, %r);" %(main_table, id, len, ip_src, ip_dst, layer, port_src, port_dst, eth_type, time))
    cursor.execute(add_employee)
    i += 1
    
print("Read PCAP-file complited")

####################################

#Создание IP и NonIP таблиц

####################################


create_table("table_ip_filter")
create_table("table_nonip_filter")

Request_Filter_IP = ("INSERT INTO table_ip_filter SELECT * FROM %s WHERE table_eth_type = '0x00000800';" %(main_table))
Request_Filter_NonIP = ("INSERT INTO table_nonip_filter SELECT * FROM %s WHERE table_eth_type <> '0x00000800';" %(main_table))

cursor.execute(Request_Filter_IP)
cursor.execute(Request_Filter_NonIP)

####################################

#Создание пар уникальных ip-адресов

####################################

create_table("uniq_ip_pair")

Request_Filter_Uniq = ("INSERT INTO uniq_ip_pair SELECT min(table_id), min(table_len), table_ip_src, table_ip_dst, min(table_layer), min(table_post_scr), min(table_post_dst), min(table_eth_type), min(table_time) FROM %s GROUP BY table_ip_src, table_ip_dst ORDER BY table_ip_src, table_ip_dst;" %(main_table))

cursor.execute(Request_Filter_Uniq)

Request_Table_Count = ("SELECT COUNT(1) FROM uniq_ip_pair;")
cursor.execute(Request_Table_Count)

uniq_row_table = int(re.sub(r'[^0-9]', '', '%s' % cursor.fetchall()))

####################################

#Создание таблиц под уникальные пары

####################################

for number in range(uniq_row_table):
    create_table("table_ip_pair_only_%r" %(number))
    Request_Sort_Uniq_Ip = ("INSERT INTO table_ip_pair_only_%r SELECT * FROM %s WHERE table_ip_src = (SELECT table_ip_src FROM uniq_ip_pair LIMIT %r, 1) AND table_ip_dst = (SELECT table_ip_dst FROM uniq_ip_pair LIMIT %r, 1);" %(number, main_table, number, number))
    
    cursor.execute(Request_Sort_Uniq_Ip)

####################################

#Создание сводной таблицы

####################################

Request_Table_Summary_Create = ("CREATE TABLE summary_table (table_id VARCHAR(30) NOT NULL, table_ip_src VARCHAR(30) NOT NULL, table_ip_dst VARCHAR(30) NOT NULL, table_post_scr VARCHAR(30) NOT NULL, table_post_dst VARCHAR(30) NOT NULL, duration VARCHAR(30) NOT NULL, total_bytes VARCHAR(30) NOT NULL, total_packets VARCHAR(30) NOT NULL, table_name VARCHAR(30) NOT NULL);")

cursor.execute(Request_Table_Summary_Create)

for number in range(uniq_row_table):
    Request_Summary_Table = ("INSERT INTO summary_table SELECT %r, uniq_ip_pair.table_ip_src, uniq_ip_pair.table_ip_dst, uniq_ip_pair.table_post_scr, uniq_ip_pair.table_post_dst, (SELECT MAX(table_time) - MIN(table_time) FROM table_ip_pair_only_%r), (SELECT SUM(table_len) FROM table_ip_pair_only_%r), (SELECT COUNT(1) FROM table_ip_pair_only_%r), ('table_ip_pair_only_%r') FROM uniq_ip_pair LIMIT %r, 1;" %(number, number, number, number, number, number))

    cursor.execute(Request_Summary_Table)

####################################

#Отбор нужных таблиц для модели

####################################

Request_Total_Bytes = ("SELECT SUM(total_bytes) FROM summary_table;")
cursor.execute(Request_Total_Bytes)

all_total_bytes = float(re.sub(r'[^0-9.]', '', '%s' % cursor.fetchall()))
all_total_bytes = int(all_total_bytes)
print(all_total_bytes)

value1 = array('i', [])
k1 = 0
value2 = array('i', [])
k2 = 0

for number in range(uniq_row_table):
    Request_Total_Bytes_Item = ("SELECT total_bytes FROM summary_table LIMIT %r, 1;" %(number))
    cursor.execute(Request_Total_Bytes_Item)
    all_total_bytes_item = float(re.sub(r'[^0-9.]', '', '%s' % cursor.fetchall()))
    all_total_bytes_item = int(all_total_bytes_item)

    if all_total_bytes_item >= (all_total_bytes / 10):
        value1.insert(k1, number)
        k1 =+ 1
    
    Request_Total_Packets_Item = ("SELECT total_packets FROM summary_table LIMIT %r, 1;" %(number))
    cursor.execute(Request_Total_Packets_Item)
    all_total_packets_item = float(re.sub(r'[^0-9.]', '', '%s' % cursor.fetchall()))
    all_total_packets_item = int(all_total_packets_item)

    if all_total_packets_item >= 100000:
        value2.insert(k2, number)
        k2 =+ 1

print("id tables where total bytes >= 10%:")
for i in value1:
    print(i)
        
print("id tables where total packets >= 100,000:")
for i in value2:
    print(i)        
        
#Завершение
cnx.commit()

cursor.close()
cnx.close()

print("Successfully completed")
