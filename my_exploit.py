import pyshark
import mysql.connector

from mysql.connector import MySQLConnection, Error


#Создание подключения
def create_connection(host_name, user_name, user_password):
    connection = None
    try:
        connection = mysql.connector.connect(
            host=host_name,
            user=user_name,
            passwd=user_password
        )
        print("Connection to MySQL DB successful")
    except Error as e:
        print(f"The error '{e}' occurred")

    return connection

connection = create_connection("localhost", "root", "123")

#Подключение файла
cap = pyshark.FileCapture('malware_traffic.pcap')

cnx = connection
cursor = cnx.cursor()

#Основные названия переменных

database_name = 'my_database'
main_table = 'main_table'

#Основной список запросов SQL

#Создать БД
Request_DB_Create = ("CREATE DATABASE %s;" %(database_name))
#Удалить БД
Request_DB_Delete = ("DROP DATABASE %s;" %(database_name))
#Подключиться к БД
Request_DB_Connect = ("USE %s" %(database_name))

#Создание и подключение к новой БД
try:
    cursor.execute(Request_DB_Create)
except:
    cursor.execute(Request_DB_Delete)
    cursor.execute(Request_DB_Create)
cursor.execute(Request_DB_Connect)

#Функция создания таблицы
def create_table(table_name):
    Request_Table_Create = ("CREATE TABLE %s ( table_id VARCHAR(30) NOT NULL, table_len VARCHAR(30) NOT NULL, table_ip_src VARCHAR(30) NOT NULL, table_ip_dst VARCHAR(30) NOT NULL, table_layer VARCHAR(30) NOT NULL, table_post_scr VARCHAR(30) NOT NULL, table_post_dst VARCHAR(30) NOT NULL, table_eth_type VARCHAR(30) NOT NULL, table_time VARCHAR(30) NOT NULL);" % (table_name))
    
    Request_Table_Delete = ("DROP TABLE %s" % (table_name))
    try:
        cursor.execute(Request_Table_Create)
    except:
        cursor.execute(Request_Table_Delete)
        cursor.execute(Request_Table_Create)

#Создание основной таблицы
create_table(main_table)

'''
#Перебор и загрузка в основную таблицу
i = 0
for idx, packet in enumerate(cap):
    id = cap[i].number
    len = cap[i].length
    try:
        ip_src = cap[i].ip.src
    except AttributeError:
        ip_src = cap[i].eth.src
    try:
        ip_dst = cap[i].ip.dst
    except AttributeError:
        ip_dst = cap[i].eth.dst   
    layer = cap[i].highest_layer
    #eth_src = cap[i].eth.addr мак-адрес
    #eth_dst = cap[i].eth.dst мак-адрес
    try:
        port_src = cap[i].tcp.srcport
    except AttributeError:
        try:
            port_src = cap[i].udp.srcport
        except AttributeError:
            port_src = ''
    try:
        port_dst = cap[i].tcp.dstport
    except AttributeError:
        try:
           port_dst = cap[i].udp.dstport  
        except AttributeError:
            port_dst = ''  
    time = cap[i].frame_info.time_relative
    
    eth_type = cap[i].eth.type

    add_employee = ("INSERT INTO laba_table VALUES (%r, %r, %r, %r, %r, %r, %r, %r, %r)" %(id, len, ip_src, ip_dst, layer, port_src, port_dst, eth_type, time))
    cursor.execute(add_employee)
    i += 1
'''

#myRequest = ("CREATE TABLE laba_sadick ( table_id VARCHAR(30) NOT NULL, table_len VARCHAR(30) NOT NULL, table_ip_src VARCHAR(30) NOT NULL, table_ip_dst VARCHAR(30) NOT NULL, table_layer VARCHAR(30) NOT NULL, table_post_scr VARCHAR(30) NOT NULL, table_post_dst VARCHAR(30) NOT NULL, table_eth_type VARCHAR(30) NOT NULL, table_time VARCHAR(30) NOT NULL);")

#cursor.execute(myRequest)

#Завершение
cnx.commit()

cursor.close()
cnx.close()
